// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  // https://github.com/pgvector/pgvector-node?tab=readme-ov-file#prisma
  extensions = [vector]
}

model Session {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  name          String
  email         String          @unique
  emailVerified DateTime?
  passwordHash  String?
  image         String?
  sessions      Session[]
  Companies     CompanyMember[]
  LoginCodes    LoginCode[]
}

model VerificationToken {
  /// prisma-lint-ignore-model require-field
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Company {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  publicName String
  slug       String @unique

  members CompanyMember[]
}

// Explicit relationship table for Company/User many-to-many relationship
model CompanyMember {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  company Company @relation(fields: [companyId], references: [id])

  userId    String
  companyId String

  @@unique([companyId, userId])
}

model LoginCode {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  User      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  codeHash  String    @unique
  verified  DateTime?
  expires   DateTime
}

model ChatMessageRow {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role     String
  content  String            @db.Text
  Thread   ChatMessageThread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  threadId String

  @@index([threadId])
}

model ChatMessageThread {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String

  messages ChatMessageRow[]
}

model VectorizedItem {
  /// prisma-lint-ignore-model require-field
  /// prisma-lint-ignore-model require-field-type
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  collection  String? // Quran, Torah, Pali Canon, Bible, etc
  book        String? // surah, chapter, etc
  verse       String? // ayah, verse, etc
  translation String? // King James Version, etc

  content       String                       @db.Text
  embedding     Unsupported("vector(3072)")?
  embedding_512 Unsupported("vector(512)")?
}
